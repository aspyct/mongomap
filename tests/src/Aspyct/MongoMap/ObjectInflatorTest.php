<?php

namespace Aspyct\MongoMap;

require_once dirname(__FILE__) . '/../../../../src/Aspyct/MongoMap/ObjectInflator.php';
require_once dirname(__FILE__) . '/TestClasses.php';

/**
 * Test class for ObjectInflator.
 * Generated by PHPUnit on 2012-07-11 at 17:00:42.
 */
class ObjectInflatorTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var ObjectInflator
     */
    protected $object;
    private $uniqueStringCount = 0;

    protected function setUp()
    {
        $this->object = new ObjectInflator;
    }

    public function testInflateFlatObject()
    {
        $publicWSet = $this->getUniqueString();
        $publicWoSet = $this->getUniqueString();
        $publicNonExisting = $this->getUniqueString();
        $protectedWSet = $this->getUniqueString();
        $protectedWoSet = $this->getUniqueString();
        $privateWSet = $this->getUniqueString();
        $privateWoSet = $this->getUniqueString();

        $dataArray = array(
            '__php_class' => 'Aspyct\MongoMap\ObjectInflatorTestATestClass',
            'publicWSet' => $publicWSet,
            'publicWoSet' => $publicWoSet,
            'publicNonExisting' => $publicNonExisting,
            'protectedWSet' => $protectedWSet,
            'protectedWoSet' => $protectedWoSet,
            'privateWSet' => $privateWSet,
            'privateWoSet' => $privateWoSet,
        );

        $expected = new ObjectInflatorTestATestClass();
        $expected->setPublicWSet($publicWSet);
        $expected->publicWoSet = $publicWoSet;
        $expected->setProtectedWSet($protectedWSet);
        $expected->defineProtectedWoSet($protectedWoSet);
        $expected->setPrivateWSet($privateWSet);
        $expected->definePrivateWoSet($privateWoSet);
        $expected->publicNonExisting = $publicNonExisting;


        $actual = $this->object->inflate($dataArray);

        $this->assertEquals($expected, $actual);
    }

    public function testInflateFlatObjectWithSubObjects()
    {
        $b1a = $this->getUniqueString();
        $b1b = $this->getUniqueString();
        $b2a = $this->getUniqueString();
        $b2b = $this->getUniqueString();

        $b1 = new ObjectInflatorTestBTestClass();
        $b1->setA($b1a);
        $b1->setB($b1b);
        $b2 = new ObjectInflatorTestBTestClass();
        $b2->setA($b2a);
        $b2->setB($b2b);

        $array1 = array(10, 55, 'a', 'F');
        $array2AsArray = array(array('__php_class' => 'Aspyct\MongoMap\ObjectInflatorTestBTestClass', 'a' => $b1a, 'b' => $b1b), array('__php_class' => 'Aspyct\MongoMap\ObjectInflatorTestBTestClass', 'a' => $b2a, 'b' => $b2b));
        $array2 = array($b1, $b2);

        $publicWSet = $array1;
        $publicWoSet = $this->getUniqueString();
        $publicNonExisting = $this->getUniqueString();
        $protectedWSet = $array2;
        $protectedWoSet = $this->getUniqueString();
        $privateWSet = $this->getUniqueString();
        $privateWoSet = $this->getUniqueString();

        $dataArray = array(
            '__php_class' => 'Aspyct\MongoMap\ObjectInflatorTestATestClass',
            'publicWSet' => $array1,
            'publicWoSet' => $publicWoSet,
            'publicNonExisting' => $publicNonExisting,
            'protectedWSet' => $array2AsArray,
            'protectedWoSet' => $protectedWoSet,
            'privateWSet' => $privateWSet,
            'privateWoSet' => $privateWoSet,
        );

        $expected = new ObjectInflatorTestATestClass();
        $expected->setPublicWSet($publicWSet);
        $expected->publicWoSet = $publicWoSet;
        $expected->setProtectedWSet($protectedWSet);
        $expected->defineProtectedWoSet($protectedWoSet);
        $expected->setPrivateWSet($privateWSet);
        $expected->definePrivateWoSet($privateWoSet);
        $expected->publicNonExisting = $publicNonExisting;


        $actual = $this->object->inflate($dataArray);

        $this->assertEquals($expected, $actual);
    }

    public function testInflateFlatArray()
    {
        $publicWSet = $this->getUniqueString();
        $publicWoSet = $this->getUniqueString();
        $publicNonExisting = $this->getUniqueString();
        $protectedWSet = $this->getUniqueString();
        $protectedWoSet = $this->getUniqueString();
        $privateWSet = $this->getUniqueString();
        $privateWoSet = $this->getUniqueString();

        $expected = array(
            'publicWSet' => $publicWSet,
            'publicWoSet' => $publicWoSet,
            'publicNonExisting' => $publicNonExisting,
            'protectedWSet' => $protectedWSet,
            'protectedWoSet' => $protectedWoSet,
            'privateWSet' => $privateWSet,
            'privateWoSet' => $privateWoSet,
        );

        $actual = $this->object->inflate($expected);

        $this->assertEquals($expected, $actual);
    }

    private function getUniqueString()
    {
        $this->uniqueStringCount++;
        return md5(time() + $this->uniqueStringCount);
    }

}